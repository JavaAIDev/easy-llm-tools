package {{invokerPackage}};

import com.fasterxml.jackson.databind.node.ObjectNode;
import com.github.victools.jsonschema.generator.Option;
import com.github.victools.jsonschema.generator.OptionPreset;
import com.github.victools.jsonschema.generator.SchemaGenerator;
import com.github.victools.jsonschema.generator.SchemaGeneratorConfig;
import com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;
import com.github.victools.jsonschema.generator.SchemaVersion;
import com.github.victools.jsonschema.module.jackson.JacksonModule;
import com.github.victools.jsonschema.module.jackson.JacksonOption;
import com.github.victools.jsonschema.module.swagger2.Swagger2Module;
import java.lang.reflect.Type;

public class JsonSchemaUtils {

  private static final SchemaGenerator schemaGenerator;

  static {
    JacksonModule jacksonModule = new JacksonModule(JacksonOption.RESPECT_JSONPROPERTY_REQUIRED);
    Swagger2Module swaggerModule = new Swagger2Module();

    SchemaGeneratorConfigBuilder configBuilder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2020_12,
        OptionPreset.PLAIN_JSON)
        .with(Option.EXTRA_OPEN_API_FORMAT_VALUES)
        .with(Option.PLAIN_DEFINITION_KEYS)
        .with(swaggerModule)
        .with(jacksonModule);

    SchemaGeneratorConfig config = configBuilder.build();
    schemaGenerator = new SchemaGenerator(config);
  }

  public static String getJsonSchema(Type inputType) {
    ObjectNode node = schemaGenerator.generateSchema(inputType);

    if ((inputType == Void.class) && !node.has("properties")) {
      node.putObject("properties");
    }

    return node.toPrettyString();
  }
}
